<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emotional Snapshot History</title>
    <!-- Include Bulma CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.3/css/bulma.min.css">
    <style>
        .footer {
            position: fixed;
        }

        .container {
            margin-top: 90px;
            margin-bottom: 90px;
        }
    </style>
</head>


<body>
    <!-- Navbar -->
    <%- include('./partials/_navbar') %>

        <div id="successBanner" class="notification is-success" style="display: none;">
            <button class="delete" onclick="closeSuccessBanner()"></button>
            Snapshot deleted successfully.
        </div>

        <!-- Edit Modal -->
        <div id="editModal" class="modal">
            <div class="modal-background" onclick="closeEditModal()"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">Edit Contextual Triggers</p>
                    <button class="delete" aria-label="close" onclick="closeEditModal()"></button>
                </header>
                <!-- Inside the modal body -->
                <section class="modal-card-body">
                    <!-- Add an input field with the id 'snapshotId' -->
                    <input type="hidden" id="snapshotId">
                    <!-- Dropdown menu for selecting triggers -->
                    <div class="field">
                        <label class="label">Select Contextual Triggers</label>
                        <div class="control">
                            <div class="select">
                                <select id="triggerDropdown" onchange="addSelectedTrigger()">
                                    <option value="" selected disabled>Select a trigger</option>
                                    <!-- Options will be dynamically populated here -->
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Display selected triggers -->
                    <div class="field">
                        <label class="label">Selected Triggers</label>
                        <div id="selectedTriggersContainer" class="control selected-triggers-container">
                            <!-- Selected triggers will be displayed here -->
                        </div>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success" onclick="saveChanges()">Save Changes</button>
                    <button class="button" onclick="closeEditModal()">Cancel</button>
                </footer>
            </div>
        </div>
        <!-- End of Edit Modal -->

        <section class="section">
            <div class="container">
                <h1 class="title">Emotional Snapshot History</h1>
                <div id="snapshotList" class="columns is-multiline">
                    <!-- Snapshot items will be dynamically added here -->
                </div>
            </div>
        </section>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script>
            // Function to fetch and display snapshot history
            async function fetchSnapshotHistoryForUser() {
                try {

                    const userId = getUserIdFromSessionStorage();

                    // Check if user is authenticated
                    if (!userId) {
                        // User is not authenticated, display error message and redirect to login
                        displayErrorMessage('You are not logged in. Please sign in to view snapshot history.');
                        setTimeout(() => {
                            window.location.href = '/signin'; // Redirect to login page after 3 seconds
                        }, 3000);
                        return; // Prevent further execution
                    }

                    const headers = getHeaders();

                    // Set up request headers with authorization cookie
                    console.log('Request headers:', headers); //debug logging

                    // Make a GET request to fetch snapshot history for the authenticated user
                    const response = await axios.get(`http://localhost:3001/api/snapshots/users/${userId}`, {
                        headers
                    });

                    const snapshots = response.data;
                    const snapshotList = document.getElementById('snapshotList');

                    // Clear existing snapshot items
                    snapshotList.innerHTML = '';

                    // Iterate over snapshots and create snapshot items
                    snapshots.forEach(snapshot => {
                        const snapshotItem = document.createElement('div');
                        snapshotItem.classList.add('column', 'is-half');
                        snapshotItem.innerHTML = `
                        <div class="card">
                            <div class="card-content">
                                <p><strong>Snapshot ID:</strong> ${snapshot.snapshot_id}</p>
                                <p><strong>Timestamp:</strong> ${snapshot.timestamp}</p>
                                <p><strong>Enjoyment Level:</strong> ${snapshot.enjoyment_level}</p>
                                <p><strong>Sadness Level:</strong> ${snapshot.sadness_level}</p>
                                <p><strong>Anger Level:</strong> ${snapshot.anger_level}</p>
                                <p><strong>Contempt Level:</strong> ${snapshot.contempt_level}</p>
                                <p><strong>Disgust Level:</strong> ${snapshot.disgust_level}</p>
                                <p><strong>Fear Level:</strong> ${snapshot.fear_level}</p>
                                <p><strong>Surprise Level:</strong> ${snapshot.surprise_level}</p>
                                <p><strong>Contextual Triggers:</strong> ${snapshot.contextualTriggers.join(', ')}</p>
                                <p><strong>Notes:</strong> ${snapshot.notes}</p>
                                <div class="buttons mt-3">
                                    <button class="button is-primary" onclick="editSnapshot(${snapshot.snapshot_id})">Edit</button>
                                    <button class="button is-danger" onclick="confirmDelete(${snapshot.snapshot_id})">Delete</button>
                                </div>
                            </div>
                        </div>
                    `;
                        snapshotList.appendChild(snapshotItem);
                    });
                } catch (error) {
                    console.error('Error fetching snapshot history:', error);
                }
            }

            // Call fetchSnapshotHistory when the page loads
            fetchSnapshotHistoryForUser();

            function getUserIdFromSessionStorage() {
                // Retrieve the user ID from sessionStorage
                const userId = sessionStorage.getItem('userId');
                console.log('userId received from session: ' + userId);

                // Check if the user ID is available
                if (userId) {
                    // User ID is available, return it
                    return userId;
                } else {
                    // User ID is not available, handle the case accordingly (e.g., redirect to login)
                    // For demonstration purposes, let's return a default value or null
                    return null;
                }
            }

            async function editSnapshot(snapshotId) {
                // Open the edit modal
                document.getElementById('editModal').classList.add('is-active');
                // Set the snapshotId value
                document.getElementById('snapshotId').value = snapshotId;
                // Fetch contextual triggers from the API

                // Clear the selected triggers list
                clearSelectedTriggers();

                // Fetch contextual triggers from the API
                try {
                    const response = await axios.get('http://localhost:3001/api/snapshots/contextualTriggers');
                    const triggers = response.data;
                    // Update the dropdown menu with triggers
                    updateDropdownMenu(triggers);
                } catch (error) {
                    console.error('Error fetching triggers:', error);
                }
            }

            function clearSelectedTriggers() {
                const selectedTriggersContainer = document.getElementById('selectedTriggersContainer');
                selectedTriggersContainer.innerHTML = ''; // Clear the contents of the selected triggers container
            }

            function closeEditModal() {
                // Close the edit modal
                document.getElementById('editModal').classList.remove('is-active');
                // Optionally, clear the form fields
                // document.getElementById('editSnapshotForm').reset();
            }

            // Function to handle form submission (saving changes)
            async function saveChanges() {
                try {
                    const snapshotId = document.getElementById('snapshotId').value;
                    console.log('Snapshot ID:', snapshotId);

                    const selectedTriggers = Array.from(document.querySelectorAll('.selected-trigger')).map(trigger => trigger.textContent.trim());
                    console.log('Selected Triggers:', selectedTriggers);

                    const headers = getHeaders();
                    console.log(headers); //debug

                    // Send a PATCH request to update the snapshot with the selected triggers
                    console.log('Sending PATCH request...');
                    await axios.patch(`http://localhost:3001/api/snapshots/${snapshotId}`, { contextualTriggers: selectedTriggers }, { headers });
                    console.log('PATCH request successful.');

                    // Close the edit modal
                    closeEditModal();

                    // Refresh the snapshot list after editing
                    console.log('Refreshing snapshot history...');
                    fetchSnapshotHistoryForUser();

                } catch (error) {
                    console.error('Error saving changes:', error);
                }
            }


            // Function to update the dropdown menu with triggers
            function updateDropdownMenu(triggers) {
                const dropdown = document.getElementById('triggerDropdown');
                // Clear existing options
                dropdown.innerHTML = '<option value="" selected disabled>Select a trigger</option>';
                // Add triggers as options
                triggers.forEach(trigger => {
                    const option = document.createElement('option');
                    option.value = trigger.trigger_id; // Assuming trigger_id is used to identify triggers
                    option.textContent = trigger.trigger_name; // Assuming trigger_name is the name of the trigger
                    dropdown.appendChild(option); // Change dropdownMenu to dropdown
                });
            }


            // Function to add a selected trigger to the display
            function addSelectedTrigger() {
                const dropdown = document.getElementById('triggerDropdown');
                const selectedOption = dropdown.options[dropdown.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    const selectedTriggersContainer = document.getElementById('selectedTriggersContainer');
                    const selectedTrigger = document.createElement('div');
                    selectedTrigger.classList.add('selected-trigger', 'button', 'is-small', 'is-info', 'mr-2', 'mb-2');
                    selectedTrigger.textContent = selectedOption.textContent; // Change to trigger name
                    selectedTrigger.onclick = () => removeSelectedTrigger(selectedTrigger);
                    selectedTriggersContainer.appendChild(selectedTrigger);
                    // Disable the selected option in the dropdown
                    selectedOption.disabled = true;
                }
            }

            // Function to remove a selected trigger from the display
            function removeSelectedTrigger(selectedTrigger) {
                selectedTrigger.remove();
                const triggerName = selectedTrigger.textContent;
                // Enable the corresponding option in the dropdown
                const dropdown = document.getElementById('triggerDropdown');
                const options = dropdown.options;
                for (let i = 0; i < options.length; i++) {
                    if (options[i].value === triggerName) {
                        options[i].disabled = false;
                        break;
                    }
                }
            }

            // Function to delete a snapshot
            async function deleteSnapshot(snapshotId) {
                try {
                    const headers = getHeaders();
                    console.log(headers); //debug
                    // Make a DELETE request to delete the snapshot
                    await axios.delete(`http://localhost:3001/api/snapshots/${snapshotId}`, { headers });
                    // Show success banner
                    showSuccessBanner();
                    // Refresh the snapshot list after deletion
                    fetchSnapshotHistoryForUser();
                } catch (error) {
                    console.error('Error deleting snapshot:', error);
                }
            }

            // Function to get headers with authorization token
            function getHeaders() {
                const userId = getUserIdFromSessionStorage();
                return {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${userId}`
                };
            }

            // Function to confirm snapshot deletion
            function confirmDelete(snapshotId) {
                // Ask for confirmation before deleting the snapshot
                if (confirm("Are you sure you want to delete this snapshot?")) {
                    // If user confirms, proceed with deletion
                    deleteSnapshot(snapshotId);
                }
            }
            // Function to close the success banner
            function closeSuccessBanner() {
                document.getElementById('successBanner').style.display = 'none';
            }

            // Function to display the success banner
            function showSuccessBanner() {
                document.getElementById('successBanner').style.display = 'block';
            }
        </script>
</body>

<!-- Footer -->
<%- include('./partials/_footer') %>

</html>